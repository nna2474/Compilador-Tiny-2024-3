package ve.edu.unet;

import java_cup.runtime.*;
import ve.edu.unet.nodosAST.*;
import java.io.InputStreamReader;


parser code {:

/***********
SymbolFactory es una nueva caracteristica que ha sido a�adida a las version 11a de cup, la cual facilita la implementacion de clases Symbol personalizadas
, esto debido a que dicha clase no provee mucha informaci�n de contexto que podria ser util para el analisis semantico o ayudar en la construccion del AST
Mas informacion en: http//4thmouse.com/index.php/2007/02/15/using-custom-symbols-in-cup/
***********/
	public static void main(String args[]) throws Exception {
		SymbolFactory sf = new DefaultSymbolFactory();
		parser parser_obj;
		if (args.length==0) 
			parser_obj=new parser(new Lexico(new InputStreamReader(System.in),sf),sf);
		else
			parser_obj=new parser(new Lexico(new InputStreamReader(new java.io.FileInputStream(args[0])),sf),sf);

		parser_obj.parse();
		NodoBase root=parser_obj.action_obj.getASTroot();
		System.out.println();
		System.out.println("IMPRESION DEL AST GENERADO");
		System.out.println();
        Util.imprimirAST(root);
		TablaSimbolos ts = new TablaSimbolos();
		ts.cargarTabla(root);
		ts.ImprimirClaves();
		Generador.setTablaSimbolos(ts);
		Generador.generarCodigoObjeto(root);
	}

:}

action code {:
	private boolean debug=true;
	private NodoBase ast=null;
	private int lineanum=0;
	
	//Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
	public NodoBase getASTroot(){
		return ast;
	}
	
:}

/* Simbolos Terminales */

terminal INT;
terminal BOOL;
terminal IF;
terminal THEN;
terminal ELSE;
terminal END;
terminal REPEAT;
terminal UNTIL;
terminal READ;
terminal WRITE;
terminal FOR;                           /***** Nuevo *****/
terminal TO;                            /***** Nuevo *****/
terminal DO;                            /***** Nuevo *****/

terminal String ID;
terminal String NUM;
terminal ASSIGN;
terminal EQ;
terminal LT;
terminal NEQ;                           /***** Nuevo <> *****/
terminal LEQ;                           /***** Nuevo <= *****/
terminal GT;                            /***** Nuevo >  *****/
terminal GEQ;                           /***** Nuevo >= *****/
terminal AND;                           /***** Nuevo *****/
terminal OR;                            /***** Nuevo *****/
terminal NOT;                           /***** Nuevo *****/
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal OVER;
terminal MOD;                           /***** Nuevo *****/
terminal LPAREN;
terminal RPAREN;
terminal LCORCHE;                       /***** Nuevo *****/
terminal RCORCHE;                       /***** Nuevo *****/
terminal SEMI;

/* Simbolos No Terminales */
non terminal program;
non terminal NodoBase stmt_seq;
non terminal NodoBase stmt;
non terminal NodoBase if_stmt;
non terminal NodoBase repeat_stmt;
non terminal NodoBase for_stmt;
non terminal NodoBase assign_stmt;
non terminal NodoBase read_stmt;
non terminal NodoBase write_stmt;
non terminal NodoBase exp;
non terminal NodoBase simple_exp;
non terminal NodoBase term;
non terminal NodoBase factor;
non terminal NodoBase var_decl;
non terminal NodoBase vector_decl;

/* Precedencia de operadores */
precedence left OR;
precedence left AND;
precedence left PLUS, MINUS;
precedence left TIMES, OVER, MOD;
precedence right NOT;

/* REGLAS GRAMATICALES */
program     ::= stmt_seq:s	{: if(debug) System.out.println("\t regla 1"); 
					ast = s;
					:}
		;

stmt_seq    ::= stmt_seq:ini SEMI stmt:sent	{: if(debug) System.out.println("\t regla 2a"); 
						NodoBase hijoActual = ini;
						if(hijoActual !=null){
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(sent);
							RESULT=ini;
						}else{
							RESULT=sent;
						}
						:}
            | stmt:sent	{: if(debug) System.out.println("\t regla 2b"); 
				RESULT=sent;				
				:}
		;

stmt        ::= var_decl:svar {: if(debug) System.out.println("\t regla 3 var");
                    RESULT=svar;
                    :}
            |   vector_decl:svec {: if(debug) System.out.println("\t regla 3 vector");
                     RESULT=svec;
                     :}
            | if_stmt:sif	{: if(debug) System.out.println("\t regla 3a");
					RESULT=sif;
					:}
            | repeat_stmt:srep	{: if(debug) System.out.println("\t regla 3b"); 
						RESULT=srep;
						:}
            | assign_stmt:sasi	{: if(debug) System.out.println("\t regla 3c");
						RESULT=sasi;
						:}
            | for_stmt:sfor	{: if(debug) System.out.println("\t regla 3 for");
                        						RESULT=sfor;
                        			    :}
            | read_stmt:slec	{: if(debug) System.out.println("\t regla 3d");
					RESULT=slec;
					:}
            | write_stmt:sesc	{: if(debug) System.out.println("\t regla 3e"); 
					RESULT=sesc;
					:}
            | error	{: if(debug) System.out.println("\t regla 3f"); 
				System.out.println("Ocurrio error en cup # 0004");
				RESULT=null;
				:}
            ;

var_decl ::= INT ID:variable {: if(debug) System.out.println("\t regla #var a");
                RESULT = new NodoDeclaracion("INT",variable.toString());
                :}
           | BOOL ID:variable {: if(debug) System.out.println("\t regla #var b");
                RESULT = new NodoDeclaracion("BOOL",variable.toString());
                :};

vector_decl ::= INT ID:variable LCORCHE simple_exp:exp RCORCHE {: if(debug) System.out.println("\t regla #var a");
                RESULT = new NodoDeclaracion("INTV",variable.toString(),exp);
                :}
           | BOOL ID:variable LCORCHE simple_exp:exp RCORCHE {: if(debug) System.out.println("\t regla #var b");
                RESULT = new NodoDeclaracion("BOOLV",variable.toString(),exp);
                :}
           | ID:variable LCORCHE simple_exp:exp RCORCHE {: if(debug) System.out.println("\t regla #var b");
                RESULT = new NodoDeclaracion("V",variable.toString(),exp);
                :};

if_stmt     ::= IF exp:ex THEN stmt_seq:pthen END	{: if(debug) System.out.println("\t regla 4a"); 
		RESULT = new NodoIf(ex,pthen);
		:}
		| IF exp:ex THEN stmt_seq:pthen ELSE stmt_seq:pelse END	{: if(debug) System.out.println("\t regla 4b"); 
		RESULT = new NodoIf(ex,pthen,pelse);		
		:}
		;

repeat_stmt ::= REPEAT stmt_seq:cuerpo UNTIL exp:prueba	{: if(debug) System.out.println("\t regla 5"); 
							RESULT = new NodoRepeat(cuerpo,prueba);
							:}
		;

for_stmt ::= FOR assign_stmt:asig TO exp:ex2 DO stmt_seq:cuerpo END {:
                if(debug) System.out.println("\t regla 6");
                RESULT = new NodoFor(asig, ex2, cuerpo);
            :}
        ;

assign_stmt ::= ID:variable 	{: if(debug) System.out.println("\t regla 6 parte del medio"); 
				/*lineanum=1000; //Pasar/Obtener la linea correcta por el Simbolo
				String nombre = variable.getName();*/
				:}
			ASSIGN exp:ex	{: if(debug) System.out.println("\t regla 6 parte final");
					if(variable!=null)
					RESULT = new NodoAsignacion(variable.toString(),ex);
					else{
					RESULT = null;
					System.out.println("Ocurrio error en cup # 0001");
					}
					:}
              /**  |ID:variable LCORCHE simple_exp:exp RCORCHE {: if(debug) System.out.println("\t regla 6 parte del medio"); :}
                            ASSIGN exp:ex	{: if(debug) System.out.println("\t regla 6 parte final");
                                    if(variable!=null && exp != null)
                                    RESULT = new NodoAsignacion(variable.toString(),ex, exp);
                                    else{
                                    RESULT = null;
                                    System.out.println("Ocurrio error en cup # 0001");
                                    }
                                    :} **/
		;

read_stmt   ::= READ ID:variable	{: if(debug) System.out.println("\t regla 7"); 
					System.out.println("Leyendo Variable");
					if(variable!=null)
					RESULT = new NodoLeer(variable.toString());
					else{
					RESULT = null;
					System.out.println("Ocurrio error en cup # 0002");
					}
					:}
		;

write_stmt  ::= WRITE exp:ex	{: if(debug) System.out.println("\t regla 8"); 
					RESULT= new NodoEscribir(ex);
					:}
		;

exp         ::= simple_exp:exI LT simple_exp:exD	{: if(debug) System.out.println("\t regla 9a"); 
								RESULT = new NodoOperacion(exI,tipoOp.menor,exD);
								:} 
		| simple_exp:exI EQ simple_exp:exD	{: if(debug) System.out.println("\t regla 9b"); 
							RESULT = new NodoOperacion(exI,tipoOp.igual,exD);
							:}
        | simple_exp:exI GT simple_exp:exD	{:
                    if(debug) System.out.println("\t regla 9c");
                    RESULT = new NodoOperacion(exI,tipoOp.mayor,exD);
                :}
        | simple_exp:exI LEQ simple_exp:exD	{:
                    if(debug) System.out.println("\t regla 9d");
                    RESULT = new NodoOperacion(exI,tipoOp.menorIgual,exD);
                :}
        | simple_exp:exI GEQ simple_exp:exD	{:
                    if(debug) System.out.println("\t regla 9e");
                    RESULT = new NodoOperacion(exI,tipoOp.mayorIgual,exD);
                :}
        | simple_exp:exI NEQ simple_exp:exD	{:
                    if(debug) System.out.println("\t regla 9f");
                    RESULT = new NodoOperacion(exI,tipoOp.diferente,exD);
                :}
        | simple_exp:exI AND simple_exp:exD	{:
                    if(debug) System.out.println("\t regla 9g");
                    RESULT = new NodoOperacion(exI,tipoOp.and,exD);
                :}
        | simple_exp:exI OR simple_exp:exD	{:
                    if(debug) System.out.println("\t regla 9h");
                    RESULT = new NodoOperacion(exI,tipoOp.or,exD);
                :}
        | NOT simple_exp:exD	{:
                    if(debug) System.out.println("\t regla 9i");
                    RESULT = new NodoOperacion(exD,tipoOp.not,exD);
                :}
		| simple_exp:ex	{: if(debug) System.out.println("\t regla 9j");
					RESULT = ex;
					:}
		;

simple_exp  ::= simple_exp:exI PLUS term:exD	{: if(debug) System.out.println("\t regla 10a"); 
							RESULT = new NodoOperacion(exI,tipoOp.mas,exD);
							:}
		| simple_exp:exI MINUS term:exD	{: if(debug) System.out.println("\t regla 10b"); 
							RESULT = new NodoOperacion(exI,tipoOp.menos,exD);
							:}
		| term:ex	{: if(debug) System.out.println("\t regla 10c");
				RESULT=ex;
				:}
		;

term        ::= term:exI TIMES factor:exD	{: if(debug) System.out.println("\t regla 11a"); 
							RESULT = new NodoOperacion(exI,tipoOp.por,exD);
							:}
		| term:exI OVER factor:exD	{: if(debug) System.out.println("\t regla 11b"); 
						RESULT = new NodoOperacion(exI,tipoOp.entre,exD);
						:}
		| term:exI MOD factor:exD {:
		                if(debug) System.out.println("\t regla 11c");
                        RESULT = new NodoOperacion(exI, tipoOp.mod, exD);
            :}
        | factor:ex	{: if(debug) System.out.println("\t regla 11d");
					RESULT=ex;
					:}
		;

factor      ::= LPAREN exp:ex RPAREN	{: if(debug) System.out.println("\t regla 12a"); 
							RESULT = ex;
							:}
		| NUM:valor	{: if(debug) System.out.println("\t regla 12b"); 
					System.out.println("Devolvi nodo numero entero");
					if(valor!=null){
						RESULT= new NodoValor(Integer.parseInt(valor));
					}else{
						RESULT = null;
						System.out.println("Ocurrio error en cup # 0005");
					}
					:}
		| ID:variable	{: if(debug) System.out.println("\t regla 12c"); 
					if(variable!=null){
						System.out.println("Construyendo Nodo ID para Lexema: "+ variable.toString());
						RESULT= new NodoIdentificador(variable.toString());		
					}else{
						RESULT = null;
						System.out.println("Ocurrio error en cup # 0005");
					}
					:}
		| error	{: if(debug) System.out.println("\t regla 12d"); 
				System.out.println("Ocurrio error en cup # 0003");
				RESULT=null;
				:}
		;